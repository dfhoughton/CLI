dfh.cli
=======

A small project to facilitate writing CLI programs in Java. The aim
is to provide a terse, declarative means of specifying commands, constraints
among commands, usage information, and so forth such that a particular CLI
program isn't cluttered with the argument parsing code and you can easily find
the logic of the program itself. Also, you needn't spend much time writing
the parsing code, you just type a terse *declaration* of how it is to occur and
get on with things.

This project is inspired by Perl modules such as Getopt::Long::Descriptive.

David F. Houghton
4 November 2011

example
-------

Here's an example of the code in use in an actual program:

        ...
	public static void main(String[] args) throws Exception {
		Object[][][] spec = {
				//
				{ { "folds", 'f', Integer.class, 10 },
						{ "number of sections to slice the data into", "n" },
						{ Range.greaterOrEq(2) } },//
				{
						{ "cutoff", 'c', Integer.class, 3 },
						{
								"satisfaction level less than which is \"unsatisfactory\"",
								"threshold" }, { Range.excl(1, 5) } },//
				{
						{ "balance", 'b', Boolean.class, true },
						{ "whether to resample data to even the odds of each class at each stage of cascade" } },//
				{ { "dump", 'd' }, { "whether to dump raw data as .arff file" } },//
				{
						{ "binary", String.class },
						{
								"whether to dump .arff files for first fold cascade training",
								"file name base" } },//
				{ { Opt.NAME, NFoldCrossValidationExperiment.class.getName() } },//
				{ { Opt.ARGS } },//
				{ {
						Opt.USAGE,
						"slice training data into n folds, training on remainder and testing on each in turn" } },//
		};
		Cli p = new Cli(spec, Modifiers.HELP);
		p.parse(args);
		int folds = p.integer("folds"), cutoff = p.integer("cutoff");
		boolean doDump = p.bool("dump"), doBalance = p.bool("balance");
		String nfoldDump = p.string("binary");
                ...

And here's the usage information produced with the --help flag:

USAGE: co.linguix.splunk.ml.experiment.NFoldCrossValidationExperiment [options]

	slice training data into n folds, training on remainder and testing on each in turn

	--help | -? | -h                   print usage information
	--balance | -b                     whether to resample data to even the odds of each class at each stage of cascade; default: true
	--binary         <file name base>  whether to dump .arff files for first fold cascade training
	--cutoff | -c    <threshold>       satisfaction level less than which is "unsatisfactory"; default: 3
	--dump | -d                        whether to dump raw data as .arff file
	--folds | -f     <n>               number of sections to slice the data into; default: 10


